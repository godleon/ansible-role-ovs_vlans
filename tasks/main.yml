---
# tasks file for ansible-role-ovs_vlans

- name: Enable IPv4 ip_forward
  lineinfile:
    dest: /etc/sysctl.conf
    line: 'net.ipv4.ip_forward = 1'
  when: ansible_virtualization_type != 'docker'
  

# Configure the networking environment depends on the distribution
- include: '{{ ansible_distribution | lower }}.yml'


- name: Create a OVS bridge named {{ ovs_vlans.OvsBridgeName }}
  openvswitch_bridge:
    bridge: '{{ ovs_vlans.OvsBridgeName }}'
    state: present
  when: ansible_virtualization_type != 'docker'

- name: Creates port {{ ovs_vlans.OvsBridgePortInterfaceName }} on bridge {{ ovs_vlans.OvsBridgeName }}
  openvswitch_port:
    bridge: '{{ ovs_vlans.OvsBridgeName }}'
    port: '{{ ovs_vlans.OvsBridgePortInterfaceName }}'
    state: present
  when: ansible_virtualization_type != 'docker'

- name: Active specified NIC
  shell: "ifconfig {{ ovs_vlans.OvsBridgePortInterfaceName }} down && ifconfig {{ ovs_vlans.OvsBridgePortInterfaceName }} up"
  when: ansible_virtualization_type != 'docker'
 
- name: Stop a network
  virt_net:
    command: destroy
    name: '{{ ovs_vlans.OvsBridgeName }}'
  ignore_errors: 'yes'
  when: ansible_virtualization_type != 'docker'

- name: Undefine a network
  virt_net:
    command: undefine
    name: '{{ ovs_vlans.OvsBridgeName }}'
  ignore_errors: 'yes'
  when: ansible_virtualization_type != 'docker'

- name: Define KVM virtual network for OVS bridge
  virt_net:
    command: define
    name: '{{ ovs_vlans.OvsBridgeName }}'
    xml: '{{ lookup("template", "templates/virsh_net.xml.j2") }}'
  when: ansible_virtualization_type != 'docker'

- name: Active KVM virtual network
  virt_net:
    state: active
    name: '{{ ovs_vlans.OvsBridgeName }}'
  when: ansible_virtualization_type != 'docker'

- name: Config KVM virtual network to autostart when boot
  virt_net:
    autostart: yes
    name: '{{ ovs_vlans.OvsBridgeName }}'
  when: ansible_virtualization_type != 'docker'